/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package org.icgc_argo.workflow_graph_lib.schema;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class AnalysisFile extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1917503381830527239L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"AnalysisFile\",\"namespace\":\"org.icgc_argo.workflow_graph_lib.schema\",\"fields\":[{\"name\":\"dataType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AnalysisFile> ENCODER =
      new BinaryMessageEncoder<AnalysisFile>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AnalysisFile> DECODER =
      new BinaryMessageDecoder<AnalysisFile>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AnalysisFile> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AnalysisFile> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AnalysisFile> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AnalysisFile>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AnalysisFile to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AnalysisFile from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AnalysisFile instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static AnalysisFile fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String dataType;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public AnalysisFile() {}

  /**
   * All-args constructor.
   *
   * @param dataType The new value for dataType
   */
  public AnalysisFile(java.lang.String dataType) {
    this.dataType = dataType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return dataType;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        dataType = value$ != null ? value$.toString() : null;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'dataType' field.
   *
   * @return The value of the 'dataType' field.
   */
  public java.lang.String getDataType() {
    return dataType;
  }

  /**
   * Sets the value of the 'dataType' field.
   *
   * @param value the value to set.
   */
  public void setDataType(java.lang.String value) {
    this.dataType = value;
  }

  /**
   * Creates a new AnalysisFile RecordBuilder.
   *
   * @return A new AnalysisFile RecordBuilder
   */
  public static org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder newBuilder() {
    return new org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder();
  }

  /**
   * Creates a new AnalysisFile RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new AnalysisFile RecordBuilder
   */
  public static org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder newBuilder(
      org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder other) {
    if (other == null) {
      return new org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder();
    } else {
      return new org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder(other);
    }
  }

  /**
   * Creates a new AnalysisFile RecordBuilder by copying an existing AnalysisFile instance.
   *
   * @param other The existing instance to copy.
   * @return A new AnalysisFile RecordBuilder
   */
  public static org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder newBuilder(
      org.icgc_argo.workflow_graph_lib.schema.AnalysisFile other) {
    if (other == null) {
      return new org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder();
    } else {
      return new org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder(other);
    }
  }

  /** RecordBuilder for AnalysisFile instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<AnalysisFile>
      implements org.apache.avro.data.RecordBuilder<AnalysisFile> {

    private java.lang.String dataType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataType)) {
        this.dataType = data().deepCopy(fields()[0].schema(), other.dataType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
    }

    /**
     * Creates a Builder by copying an existing AnalysisFile instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(org.icgc_argo.workflow_graph_lib.schema.AnalysisFile other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.dataType)) {
        this.dataType = data().deepCopy(fields()[0].schema(), other.dataType);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Gets the value of the 'dataType' field.
     *
     * @return The value.
     */
    public java.lang.String getDataType() {
      return dataType;
    }

    /**
     * Sets the value of the 'dataType' field.
     *
     * @param value The value of 'dataType'.
     * @return This builder.
     */
    public org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder setDataType(
        java.lang.String value) {
      validate(fields()[0], value);
      this.dataType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'dataType' field has been set.
     *
     * @return True if the 'dataType' field has been set, false otherwise.
     */
    public boolean hasDataType() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'dataType' field.
     *
     * @return This builder.
     */
    public org.icgc_argo.workflow_graph_lib.schema.AnalysisFile.Builder clearDataType() {
      dataType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AnalysisFile build() {
      try {
        AnalysisFile record = new AnalysisFile();
        record.dataType =
            fieldSetFlags()[0] ? this.dataType : (java.lang.String) defaultValue(fields()[0]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AnalysisFile> WRITER$ =
      (org.apache.avro.io.DatumWriter<AnalysisFile>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AnalysisFile> READER$ =
      (org.apache.avro.io.DatumReader<AnalysisFile>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.dataType);
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.dataType = in.readString();

    } else {
      for (int i = 0; i < 1; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.dataType = in.readString();
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
